name: Automated Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Automated code review using AI
  code-review:
    runs-on: ubuntu-latest
    name: AI Code Review
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run complexity analysis
        run: |
          npx madge --circular --extensions ts,tsx,js,jsx src/
          npx madge --summary src/

  # Check for common issues
  code-quality-checks:
    runs-on: ubuntu-latest
    name: Quality Checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for TODO/FIXME comments
        run: |
          echo "## TODO/FIXME Comments Found:" >> $GITHUB_STEP_SUMMARY
          grep -r "TODO\|FIXME" src/ --include="*.tsx" --include="*.ts" || echo "No TODO/FIXME comments found" >> $GITHUB_STEP_SUMMARY

      - name: Check for console.log statements
        run: |
          echo "## Console.log Statements:" >> $GITHUB_STEP_SUMMARY
          grep -r "console\." src/ --include="*.tsx" --include="*.ts" || echo "No console statements found" >> $GITHUB_STEP_SUMMARY

      - name: Check for unused imports
        run: |
          npx unimported || true

      - name: Check component naming conventions
        run: |
          echo "## Component Files:" >> $GITHUB_STEP_SUMMARY
          find src/components -name "*.tsx" -exec basename {} \; | sort >> $GITHUB_STEP_SUMMARY

  # Performance analysis
  performance-check:
    runs-on: ubuntu-latest
    name: Performance Analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze
        run: |
          npm run build
          npx @next/bundle-analyzer || true

      - name: Check image optimization
        run: |
          echo "## Image Files Analysis:" >> $GITHUB_STEP_SUMMARY
          find . -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.webp" | head -20 >> $GITHUB_STEP_SUMMARY || echo "No image files found" >> $GITHUB_STEP_SUMMARY

  # Security checks
  security-analysis:
    runs-on: ubuntu-latest
    name: Security Analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for hardcoded secrets
        run: |
          echo "## Security Check Results:" >> $GITHUB_STEP_SUMMARY
          grep -r "password\|secret\|key\|token" src/ --include="*.tsx" --include="*.ts" | grep -v "placeholder" || echo "No hardcoded secrets found" >> $GITHUB_STEP_SUMMARY

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate || true

  # Accessibility checks
  accessibility-check:
    runs-on: ubuntu-latest
    name: Accessibility Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for accessibility issues
        run: |
          echo "## Accessibility Analysis:" >> $GITHUB_STEP_SUMMARY
          echo "Checking for common accessibility patterns..." >> $GITHUB_STEP_SUMMARY
          
          # Check for alt attributes
          grep -r "img\|Image" src/ --include="*.tsx" | grep -v "alt=" | head -10 >> $GITHUB_STEP_SUMMARY || echo "All images have alt attributes" >> $GITHUB_STEP_SUMMARY
          
          # Check for form labels
          grep -r "input\|Input" src/ --include="*.tsx" | grep -v "label\|aria-label" | head -5 >> $GITHUB_STEP_SUMMARY || echo "All inputs have labels" >> $GITHUB_STEP_SUMMARY
