name: Performance Monitoring

on:
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  lighthouse-audit:
    runs-on: ubuntu-latest
    name: Lighthouse Performance Audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 10
        env:
          CI: true

      - name: Wait for server to be ready
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run Lighthouse audit
        run: |
          npm install -g lighthouse
          
          mkdir -p lighthouse-reports
          
          # Audit main pages
          lighthouse http://localhost:3000 --output=json --output-path=lighthouse-reports/home.json --chrome-flags="--headless --no-sandbox"
          lighthouse http://localhost:3000/components --output=json --output-path=lighthouse-reports/components.json --chrome-flags="--headless --no-sandbox"

      - name: Parse Lighthouse results
        run: |
          # Parse performance scores
          HOME_PERFORMANCE=$(cat lighthouse-reports/home.json | jq '.categories.performance.score * 100')
          HOME_ACCESSIBILITY=$(cat lighthouse-reports/home.json | jq '.categories.accessibility.score * 100')
          HOME_BEST_PRACTICES=$(cat lighthouse-reports/home.json | jq '.categories["best-practices"].score * 100')
          HOME_SEO=$(cat lighthouse-reports/home.json | jq '.categories.seo.score * 100')
          
          COMPONENTS_PERFORMANCE=$(cat lighthouse-reports/components.json | jq '.categories.performance.score * 100')
          COMPONENTS_ACCESSIBILITY=$(cat lighthouse-reports/components.json | jq '.categories.accessibility.score * 100')
          
          echo "HOME_PERFORMANCE=$HOME_PERFORMANCE" >> $GITHUB_ENV
          echo "HOME_ACCESSIBILITY=$HOME_ACCESSIBILITY" >> $GITHUB_ENV
          echo "HOME_BEST_PRACTICES=$HOME_BEST_PRACTICES" >> $GITHUB_ENV
          echo "HOME_SEO=$HOME_SEO" >> $GITHUB_ENV
          echo "COMPONENTS_PERFORMANCE=$COMPONENTS_PERFORMANCE" >> $GITHUB_ENV
          echo "COMPONENTS_ACCESSIBILITY=$COMPONENTS_ACCESSIBILITY" >> $GITHUB_ENV

      - name: Create performance report
        run: |
          cat > performance-report.md << 'EOF'
          # ðŸš€ Performance Audit Report
          
          ## Homepage Scores
          - **Performance**: ${{ env.HOME_PERFORMANCE }}/100
          - **Accessibility**: ${{ env.HOME_ACCESSIBILITY }}/100
          - **Best Practices**: ${{ env.HOME_BEST_PRACTICES }}/100
          - **SEO**: ${{ env.HOME_SEO }}/100
          
          ## Components Page Scores
          - **Performance**: ${{ env.COMPONENTS_PERFORMANCE }}/100
          - **Accessibility**: ${{ env.COMPONENTS_ACCESSIBILITY }}/100
          
          ## Recommendations
          
          ### Performance Optimizations
          - Optimize images (use WebP format)
          - Implement code splitting
          - Minimize unused JavaScript
          - Use efficient cache policies
          
          ### Accessibility Improvements
          - Ensure all images have alt attributes
          - Improve color contrast ratios
          - Add ARIA labels where needed
          - Test with screen readers
          
          ### SEO Enhancements
          - Add meta descriptions
          - Implement structured data
          - Optimize page titles
          - Improve internal linking
          
          ---
          *Report generated on: $(date)*
          *Workflow: ${{ github.workflow }}*
          *Run ID: ${{ github.run_id }}*
          EOF

      - name: Comment on PR (if PR triggered)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“Š Performance Audit Results\n\n${report}`
            });

      - name: Create issue for poor performance
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const homePerf = parseFloat(process.env.HOME_PERFORMANCE);
            const componentsPerf = parseFloat(process.env.COMPONENTS_PERFORMANCE);
            
            if (homePerf < 80 || componentsPerf < 80) {
              const fs = require('fs');
              const report = fs.readFileSync('performance-report.md', 'utf8');
              
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `âš¡ Performance Alert: Scores below 80`,
                body: `# Performance Alert\n\nOur automated performance monitoring detected scores below the 80 threshold.\n\n${report}`,
                labels: ['performance', 'monitoring', 'needs-attention']
              });
            }

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: lighthouse-reports/
          retention-days: 30

  bundle-analysis:
    runs-on: ubuntu-latest
    name: Bundle Size Analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          npx @next/bundle-analyzer || true

      - name: Check bundle size
        run: |
          # Get build output information
          BUILD_SIZE=$(du -sh .next/ | cut -f1)
          STATIC_SIZE=$(du -sh .next/static/ | cut -f1)
          
          echo "BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV
          echo "STATIC_SIZE=$STATIC_SIZE" >> $GITHUB_ENV
          
          echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "- Total build size: $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- Static assets size: $STATIC_SIZE" >> $GITHUB_STEP_SUMMARY
