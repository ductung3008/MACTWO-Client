name: Auto PR Labeler

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: read
  pull-requests: write

jobs:
  label-pr:
    runs-on: ubuntu-latest
    name: Auto Label PR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label based on file changes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = [];
            const fileTypes = {
              'frontend': ['.tsx', '.jsx', '.ts', '.js', '.css'],
              'components': ['src/components/'],
              'ui': ['src/components/ui/'],
              'hooks': ['src/hooks/'],
              'types': ['src/types/', '.d.ts'],
              'config': ['.config', '.json', '.yml', '.yaml'],
              'styles': ['.css', '.scss', '.sass'],
              'docs': ['.md', 'README'],
              'tests': ['.test.', '.spec.', '__tests__'],
              'api': ['src/lib/api', 'src/utils/api'],
              'store': ['src/stores/', 'src/store/'],
              'schemas': ['src/schemas/']
            };

            // Check file extensions and paths
            files.forEach(file => {
              Object.entries(fileTypes).forEach(([label, patterns]) => {
                patterns.forEach(pattern => {
                  if (file.filename.includes(pattern) || file.filename.endsWith(pattern)) {
                    if (!labels.includes(label)) {
                      labels.push(label);
                    }
                  }
                });
              });
            });

            // Size labels based on changes
            const totalChanges = files.reduce((acc, file) => acc + file.additions + file.deletions, 0);
            if (totalChanges < 10) labels.push('size/XS');
            else if (totalChanges < 50) labels.push('size/S');
            else if (totalChanges < 200) labels.push('size/M');
            else if (totalChanges < 500) labels.push('size/L');
            else labels.push('size/XL');

            // PR type based on title
            const title = context.payload.pull_request.title.toLowerCase();
            if (title.includes('feat') || title.includes('feature')) labels.push('enhancement');
            if (title.includes('fix') || title.includes('bug')) labels.push('bug');
            if (title.includes('docs') || title.includes('documentation')) labels.push('documentation');
            if (title.includes('refactor') || title.includes('cleanup')) labels.push('refactor');
            if (title.includes('deps') || title.includes('dependency')) labels.push('dependencies');
            if (title.includes('test')) labels.push('tests');
            if (title.includes('ci') || title.includes('workflow')) labels.push('ci/cd');

            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

  pr-size-comment:
    runs-on: ubuntu-latest
    name: PR Size Comment
    steps:
      - name: Add size comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const totalChanges = files.reduce((acc, file) => acc + file.additions + file.deletions, 0);
            const filesChanged = files.length;
            
            let sizeEmoji = '';
            let sizeComment = '';
            
            if (totalChanges < 10) {
              sizeEmoji = 'ðŸŸ¢';
              sizeComment = 'This is a small PR - easy to review!';
            } else if (totalChanges < 50) {
              sizeEmoji = 'ðŸŸ¡';
              sizeComment = 'This is a medium-sized PR.';
            } else if (totalChanges < 200) {
              sizeEmoji = 'ðŸŸ ';
              sizeComment = 'This is a large PR. Consider breaking it down into smaller changes.';
            } else {
              sizeEmoji = 'ðŸ”´';
              sizeComment = 'This is a very large PR. Please consider splitting it into multiple smaller PRs.';
            }

            const comment = `
            ## ${sizeEmoji} PR Size Analysis
            
            **Files Changed:** ${filesChanged}  
            **Total Changes:** ${totalChanges} lines
            
            ${sizeComment}
            
            ### File Changes Breakdown:
            ${files.map(file => `- \`${file.filename}\`: +${file.additions} -${file.deletions}`).join('\n')}
            `;

            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Size Analysis')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
